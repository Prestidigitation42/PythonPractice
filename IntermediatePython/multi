'''
Last GitHub Sync
-Desktop: 10/12/22
-Surface Pro: 10/12/22 

Created on: 10/2/22

Source: https://youtu.be/HGOBQPFzWKo

@author: nstru
'''

'''
-Threading & multiprocessing: Run code in parallel to speed up code 
-Difference between process and thread: 
    Process: An instance of a program
    + Takes advantage of multiple CPUs and cores
    + Separate memory space -> Memory is not shared between processes
    + Great for CPU-bound processing
    + New process is stated independently from other processes
    + Processes are interruptable/killable
    + One GIL for each process -> avoids GIL limitation
    - Heavyweight
    - Starting a process is slower than starting a thread
    - More memory
    - IPC (inter-process communication) is more complicated
    Threads: An entity with a process than can be scheduled
    + All threads within a process share the same memory
    + Lightweight
    + Starting a thread is faster than starting a process
    + Great for I/O-bound tasks
    - Threading is limited by GIL: Only one thread at a time
    - No effect for CPU-bound tasks
    - Not interruptable/killable
    - Careful with race conditions (occurs when two or more threads
      want to modify same variable at the same time)
-How and why threads are limited by GIL 
    GIL: Global Interpreter Lock
    - A lock that allows only one thread at a time to execute in Pythong
    - Needed in CPython because memory management is not thread-safe
    Avoid:
    - Use multiprocessing
    - Use a different, free-threaded Python implementation (Jython,
      IronPython)
    - Use Python as a wrapper for third-party libraries (C/C++) (numpy,
      scipy)
'''

# Multiprocessing
from multiprocessing import Process
import os 
import time

def square_numbers():
    for i in range(100):
        i * i
        time.sleep(0.1)

processes = []
num_processes = os.cpu_count()

for i in range(num_processes):
    p = Process(target=square_numbers)
    processes.append(p)
    
# start
for p in processes:
    p.start()
    
# join
for p in processes:
    p.join()


# Threading
from threading import Thread

threads = []
num_threads = 10

for i in range(num_threads):
    t = Thread(target=square_numbers)
    threads.append(t)
    
for t in threads:
    t.start()
    
for t in threads:
    t.join(0)
    
print('end main')
