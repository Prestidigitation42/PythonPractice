'''
Last GitHub Sync
-Desktop: 10/12/22
-Surface Pro: 10/12/22

Created on: 9/27/22

@author: nstru
'''

'''
-lambda: One line anonymous function defined without a name, structured:
 lambda arguments: expression
-Used for simple functions used only once, or as an argument for higher
 order functions (functions w/other functions as arguments)
'''

from functools import reduce

# These functions have identical outputs, lambda is much more concise
add10 = lambda x: x + 10
print(add10(15))

def add10_func(x):
    return x + 10

mult = lambda x,y: x * y
print(mult(5,22.5))

# sorted() can be given rules for ordering
points2D = [(1,2), (15,1), (5,-1), (10,4)]
points2D_sort1 = sorted(points2D)
print(points2D_sort1)
# Functions vs lambda as function argument
def sort_by_y(x):
    return x[1]
# Identical lambda
points2D_sort2 = sorted(points2D, key=lambda x: x[1])
print(points2D_sort2)
points2D_sort_sum = sorted(points2D, key=lambda x: x[0] + x[1])

# map(func, seq=sequence)
a = [1, 2, 3, 4, 5]
b = map(lambda x: x * 2, a) # map object
print(list(b))
# This can also be done with list comprehension
c = [x*2.23 for x in a]
print(c)

# filter(func, seq)
d = filter(lambda x: x %2==0, a)
print(list(d))
# This can also be done with list comprehension
e = [x for x in a if x%2!=0]
print(e)

# reduce(func, seq)
prod_a = reduce(lambda x,y: x*y, a)
print(prod_a)
