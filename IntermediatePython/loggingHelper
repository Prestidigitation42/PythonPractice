'''
Last GitHub Sync
-Desktop: 10/12/22
-Surface Pro: 10/12/22

Created on: 9/29/22

Source: https://youtu.be/HGOBQPFzWKo

@author: nstru
'''

import logging
import logging.config
import traceback

logging.config.fileConfig('logging.conf')

# Set up module-specific logger with the same name as the module
# Creates a hierarchy of loggers, starting with root logger
logger = logging.getLogger(__name__)
# Messages from hierarchy propogate up to base logger
# Propogation can be stopped
logger.propagate = False
logger.info('Hello from loggingHelper')

# Lock handlers: Handlers are responsible for dispatching appropriate lock 
# message to handler's specific destination (ex. to files via HTTP/email)
stream_h = logging.StreamHandler()
file_h = logging.FileHandler('file.log')
# Set level and format for handlers
stream_h.setLevel(logging.WARNING)
file_h.setLevel(logging.ERROR)

formatter = logging.Formatter('%(name)s - %(levelname)s - %(message)s')
stream_h.setFormatter(formatter)
file_h.setFormatter(formatter)

logger.addHandler(stream_h)
logger.addHandler(file_h)

logger.warning('This is a warning')
logger.error('This is an error')

# Capturing stack traces
try:
    a = [1,2,3]
    val = a[4]
except IndexError as e:
    logging.error("The error is %s", traceback.format_exc())
