'''
Created on Aug 2, 2022

@author: nstru
'''

from tkinter import *

root = Tk()
root.title("Calculator")
root.resizable(width=False, height=False)

e = Entry(root, width=35, borderwidth=5)
e.grid(row=0, column=1, columnspan=2)

# Set variables to hold the numbers as calculations are performed
n1 = DoubleVar()
n2 = DoubleVar()
n3 = DoubleVar()
op = StringVar()

op.set("new")

status = Label(root, text="Status: num1 = " + str(n1.get()) + ", num2 = " + 
               str(n2.get()) + ", num3 = " + str(n3.get()) + ", op = " + op.get(),
               relief=SUNKEN, anchor=W)


# Set default values
def reset_values():
    n1.set(0)
    n2.set(0)
    n3.set(0)
    op.set("new")
    
def update_status():
    status = Label(root, text="Status: num1 = " + str(n1.get()) + ", num2 = "
                   + str(n2.get()) + ", num3 = " + str(n3.get()) + ", op = " 
                   + op.get(), relief=SUNKEN, anchor=W)
    status.grid(row=7, column=0, columnspan=4, sticky=W+E)

# Define functions for use of each button

def numclick(num):
    # Appends a number to entry when its key is pressed
    current = e.get()
    e.delete(0, END)
    if current == "0":
        e.insert(0, str(num))
    else:
        e.insert(0, current + str(num))
    update_status()
    
def entry_reset():
    n1.set(e.get())
    n2.set(0)
    n3.set(0)
    e.delete(0, END)
    e.insert(0, "0")
    update_status()

# Functions for MADS (Mul, Add, Div, Sub)
def button_add():
    op.set("addition")
    entry_reset()
    
def button_sub():
    op.set("subtraction")
    entry_reset()

def button_mul():
    op.set("multiplication")
    entry_reset()

def button_div():
    op.set("division")
    entry_reset()

def button_exp():
    op.set("exponentiate")
    entry_reset()
    
# Functions for Per, Square, Sqrt, Exp, N!)
def button_per():
    n3.set(e.get())
    n1.set(n3.get() * 0.01)
    e.delete(0, END)
    e.insert(0, str(n1.get()))
    update_status()
    
def button_sqr():
    n3.set(e.get())
    n1.set(n3.get() ** 2)
    e.delete(0, END)
    e.insert(0, str(n1.get()))
    update_status()

def button_sqrt():
    n3.set(e.get())
    if n3.get() < 0:
        status = Label(root, text="Status: Imaginary Number Error. Resetting.",
                       relief=SUNKEN, anchor=W)
        status.grid(row=7, column=0, columnspan=4, sticky=W+E)
        e.delete(0, END)
        reset_values()    
    else:    
        n1.set(n3.get() ** 0.5)
        e.delete(0, END)
        e.insert(0, str(n1.get()))
        update_status()

def button_fac():
    n3.set(e.get())
    z = int(n3.get())
    if z != n3.get() or z <0:
        status = Label(root, text="Status: Factorial Error! Positive Integers "
                       "Only. Resetting.",
                       relief=SUNKEN, anchor=W)
        status.grid(row=7, column=0, columnspan=4, sticky=W+E)
        e.delete(0, END)
        reset_values()    
    else:
        x = z
        for i in range(1, z):
            x *= i
        n1.set(x)
        e.delete(0, END)
        e.insert(0, str(n1.get()))
        update_status()

def button_clear():
    # Clears the entry value
    e.delete(0, END)
    reset_values()
    update_status()
    
def button_equal():
    if op.get() == "new":
        n1.set(e.get())
        update_status()
    elif op.get() != "new":
        n2.set(e.get())
        update_status()

    if op.get() == "addition":
        e.delete(0, END)
        n3.set(n1.get() + n2.get())
        e.insert(0, str(n3.get()))
        update_status()
    elif op.get() == "subtraction":
        e.delete(0, END)
        n3.set(n1.get() - n2.get())
        e.insert(0, str(n3.get()))
        update_status()
    elif op.get() == "multiplication":
        e.delete(0, END)
        n3.set(n1.get() * n2.get())
        e.insert(0, str(n3.get()))
        update_status()
    elif op.get() == "division":
        if n2.get() == 0:
            status = Label(root, text="Status: Divide by 0 Error! Resetting.",
                           relief=SUNKEN, anchor=W)
            status.grid(row=7, column=0, columnspan=4, sticky=W+E)
            e.delete(0, END)
            reset_values()
        else:
            e.delete(0, END)
            n3.set(n1.get() / n2.get())
            e.insert(0, str(n3.get()))
            update_status()
    elif op.get() == "exponentiate":
        e.delete(0, END)
        n3.set(n1.get() ** n2.get())
        e.insert(0, str(n3.get()))
        update_status()

# Define buttons

b1 = Button(root, text="1", padx=40, pady=20, command=lambda: numclick(1))
b2 = Button(root, text="2", padx=40, pady=20, command=lambda: numclick(2))
b3 = Button(root, text="3", padx=40, pady=20, command=lambda: numclick(3))
b4 = Button(root, text="4", padx=40, pady=20, command=lambda: numclick(4))
b5 = Button(root, text="5", padx=40, pady=20, command=lambda: numclick(5))
b6 = Button(root, text="6", padx=40, pady=20, command=lambda: numclick(6))
b7 = Button(root, text="7", padx=40, pady=20, command=lambda: numclick(7))
b8 = Button(root, text="8", padx=40, pady=20, command=lambda: numclick(8))
b9 = Button(root, text="9", padx=40, pady=20, command=lambda: numclick(9))
b0 = Button(root, text="0", padx=40, pady=20, command=lambda: numclick(0))
bdot = Button(root, text=".", padx=41, pady=20, command=lambda: numclick("."))

# Addition, subtraction, multiplication, division
badd = Button(root, text="+", padx=39, pady=20, command=button_add)
bsub = Button(root, text="-", padx=41, pady=20, command=button_sub)
bmul = Button(root, text="*", padx=41, pady=20, command=button_mul)
bdiv = Button(root, text="/", padx=41, pady=20, command=button_div)

# Plus/minus, percentage, square, square_root, exponential, factorial
bper = Button(root, text="%", padx=40, pady=20, command=button_per)
bsq = Button(root, text="x^2", padx=35, pady=20, command=button_sqr)
bsqr = Button(root, text="x^0.5", padx=31, pady=20, command=button_sqrt)
bexp = Button(root, text="x^y", padx=35, pady=20, command=button_exp)
bfac = Button(root, text="n!", padx=40, pady=20, command=button_fac)

#Equals, clear
bequal = Button(root, text="=", padx=94, pady=20, command=button_equal)
bclear = Button(root, text="Clear", padx=87, pady=20, command=button_clear)

# Place the buttons

b7.grid(row=1, column=0)
b8.grid(row=1, column=1)
b9.grid(row=1, column=2)
bper.grid(row=1, column=3)

b4.grid(row=2, column=0)
b5.grid(row=2, column=1)
b6.grid(row=2, column=2)
bsq.grid(row=2, column=3)

b1.grid(row=3, column=0)
b2.grid(row=3, column=1)
b3.grid(row=3, column=2)
bsqr.grid(row=3, column=3)
    
b0.grid(row=4, column=0)
badd.grid(row=4, column=1)
bsub.grid(row=4, column=2)
bexp.grid(row=4, column=3)

bdot.grid(row=5, column=0)
bmul.grid(row=5, column=1)
bdiv.grid(row=5, column=2)
bfac.grid(row=5, column=3)

bequal.grid(row=6, column=0, columnspan=2)
bclear.grid(row=6, column=2, columnspan=2)

status.grid(row=7, column=0, columnspan=4, sticky=W+E)


root.mainloop()
